import streamlit as st
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import pylab as plt
import webbrowser
import base64
import io


# Cargar datos
pernoctaciones = pd.read_csv('../data/ine_pernoctaciones.csv')
viajeros = pd.read_csv('../data/ine_viajeros.csv')
total = pd.read_csv('../data/ine_total.csv')
clima = pd.read_csv('../data/clima.csv')




# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="An√°lisis de Datos de Turismo y Clima",
    page_icon="üìä"

)


# Filtro de periodo


background_color = "#262730"  # Azul por defecto
border_color = "#0068c9"  # Azul por defecto
selected_color = "#83c9ff"  # Azul claro por defecto
text_color = "#FFFFFF"  # Blanco por defecto

# Aplicar el estilo personalizado
custom_css = f"""
    <style>
        .st-bw {{
            background-color: {background_color} !important; /* Fondo de la caja */
        }}
        .st-c7, .st-ec, .st-dh {{
            border: 1px solid {border_color} !important; /* Bordes y l√≠nea alrededor de la caja */
        }}
        .st-ew, .st-e0, .st-c2.st-c5.st-dq.st-ew.st-ex.st-c4.st-dw.st-e0.st-c7 {{
            background-color: {selected_color} !important; /* Fondo de las opciones seleccionadas */
            color: {text_color} !important;
        }}
        .css-145kmo2 {{
            background-color: {background_color} !important; /* Fondo de la selecci√≥n de p√°gina */
            color: {text_color} !important; /* Texto blanco para la selecci√≥n de p√°gina */
        }}
        .st-ci {{
            background-color: #404040 !important; /* Fondo gris oscuro para la barra lateral en la p√°gina "Exploration" */
            color: #FFFFFF !important; /* Texto blanco para la barra lateral en la p√°gina "Exploration" */
        }}
    </style>
"""

# Aplicar el estilo personalizado
st.markdown(custom_css, unsafe_allow_html=True)











page = st.sidebar.radio("Selecciona una p√°gina", ["üè†Home", "üî•Mapa", "üîçExploraci√≥n"])

# P√°gina de Inicio para Introducir Datos
if page == "üè†Home":

    st.title('An√°lisis de Datos de Turismo y Climaüß≥üå§Ô∏è')
    video_path= '../img/home.mp4'
    st.video(video_path)
    # Breve Descripci√≥n
    st.markdown("""Sum√©rgete en un viaje a trav√©s de los √∫ltimos 10 a√±os y descubre c√≥mo la industria tur√≠stica en Espa√±a ha enfrentado
    desaf√≠os, se ha adaptado a cambios y ha emergido con nuevas perspectivas despu√©s del impacto del COVID-19.""")

    # Secciones Destacadas
    st.header('Secciones Destacadas')
    
    # Evoluci√≥n Hist√≥rica
    st.subheader('Evoluci√≥n Hist√≥ricaüìäüîÑ')
    st.markdown("""Viaja en el tiempo y explora c√≥mo el turismo ha evolucionado desde 2014 hasta hoy. Descubre los secretos de la industria
    a trav√©s de patrones y tendencias.""")
    
    # Impacto del COVID-19
    st.subheader('Impacto del COVID-19 ü¶†üåç')
    st.markdown("""Descubre c√≥mo la pandemia de COVID-19 ha impactado directamente en el turismo en Espa√±a. Analiza los cambios en las
    pernoctaciones, la llegada de viajeros y las regiones m√°s afectadas.""")
    
    # Recuperaci√≥n y Tendencias Actuales
    st.subheader('Recuperaci√≥n y Tendencias Actuales üöÄüîç')
    st.markdown("""Despega hacia la fase post-COVID y observa c√≥mo las provincias est√°n mostrando signos de recuperaci√≥n. Explora las
    nuevas tendencias que est√°n definiendo el turismo actual en Espa√±a.""")
    
    
elif page == "üî•Mapa":
    st.title('Mapa')
    
    # Mapa interactivo de Foursquare
    foursquare_map_url = "https://studio.foursquare.com/public/a8a7e4bf-fc29-4962-b9ea-74c4458d7d34"
    # Crear un iframe HTML para incrustar el mapa
    iframe_html = f'<iframe src="{foursquare_map_url}" width="100%" height="600"></iframe>'
    # Mostrar el iframe en Streamlit
    st.markdown(iframe_html, unsafe_allow_html=True)
    
elif page == "üîçExploraci√≥n":
    st.title('Exploraci√≥n de Datos - Todas las Gr√°ficas')    

    st.sidebar.title('Filtros')



    # Filtros
    clima['Periodo'] = pd.to_datetime(clima['Periodo'])
    pernoctaciones['Periodo'] = pd.to_datetime(pernoctaciones['Periodo'])
    viajeros['Periodo'] = pd.to_datetime(viajeros['Periodo'])
    total['Periodo'] = pd.to_datetime(total['Periodo'])

    fecha_inicio = st.sidebar.date_input('Seleccionar Fecha de Inicio', clima['Periodo'].min())
    fecha_fin = st.sidebar.date_input('Seleccionar Fecha de Fin', clima['Periodo'].max())

    # Convierte fecha_inicio y fecha_fin a Timestamp
    fecha_inicio = pd.Timestamp(fecha_inicio)
    fecha_fin = pd.Timestamp(fecha_fin)

    provincia_filter = st.sidebar.multiselect('Seleccionar Provincia(s)', pernoctaciones['Provincia'].unique())
    tipo_datos_filter = st.sidebar.multiselect('Seleccionar Tipo de Datos', ['Pernoctaciones', 'Viajeros'])
    viajeros_pernoctaciones_filter= st.sidebar.multiselect('Seleccionar Tipo Viajeros/Pernoctaciones',['Espana', 'Extranjero'])
    clima_tipo_datos_filter = st.sidebar.selectbox('Seleccionar Tipo de Datos de Clima', ['Media_tmed', 'Media_prec', 'Media_sol', 'Media_tmin', 'Media_tmax'])
    


    # Aplicar filtros
    pernoctaciones_filtered = pernoctaciones.loc[
        (pernoctaciones['Provincia'].isin(provincia_filter)) & 
        (pernoctaciones['Periodo'] >= fecha_inicio) & 
        (pernoctaciones['Periodo'] <= fecha_fin)
    ]
    viajeros_filtered = viajeros.loc[
        (viajeros['Provincia'].isin(provincia_filter)) & 
        (viajeros['Periodo'] >= fecha_inicio) & 
        (viajeros['Periodo'] <= fecha_fin)
    ]
    clima_filtered = clima.loc[
        (clima['Provincia'].isin(provincia_filter)) & 
        (clima['Periodo'] >= fecha_inicio) & 
        (clima['Periodo'] <= fecha_fin)
    ]
    
    
    


    # Mapa interactivo de Foursquare
    foursquare_map_url = "https://studio.foursquare.com/public/a8a7e4bf-fc29-4962-b9ea-74c4458d7d34"
    # Crear un iframe HTML para incrustar el mapa
    iframe_html = f'<iframe src="{foursquare_map_url}" width="100%" height="600"></iframe>'
    # Mostrar el iframe en Streamlit
    st.markdown(iframe_html, unsafe_allow_html=True)
    
    
    
    
    
    
    # Visualizar datos

    col1, col2 = st.columns([1, 1]) 
    col1.header('Tabla de Pernoctaciones, Viajeros o Total')
    if 'Pernoctaciones' in tipo_datos_filter:
        col1.write(pernoctaciones_filtered[['Provincia','Periodo', 'Viajeros_Pernoctaciones', 'Residencia', 'Total']])
    elif 'Viajeros' in tipo_datos_filter:
        viajeros_filtered_subset = viajeros_filtered[viajeros_filtered['Residencia'].isin(viajeros_pernoctaciones_filter)]
        col1.write(viajeros_filtered_subset[['Provincia', 'Periodo', 'Viajeros_Pernoctaciones', 'Residencia', 'Total']])

    col2.header('Tabla de Clima')
    col2.write(clima_filtered[['Provincia', 'Periodo', 'Media_tmed', 'Media_prec', 'Media_sol', 'Media_tmin', 'Media_tmax']])





    altura_graficos = 400

    sns.set_theme(style="darkgrid", palette="dark:#001146")
    
    
    
    
    total_pernoctaciones = pernoctaciones_filtered.groupby('Provincia')['Total'].sum().reset_index()
    total_viajeros = viajeros_filtered.groupby('Provincia')['Total'].sum().reset_index()

    # Crear figura de Plotly Express
    fig = px.bar()
    # Verificar qu√© tipo de datos se ha seleccionado y agregar barras correspondientes
    if 'Pernoctaciones' in tipo_datos_filter:
        fig.add_bar(x=total_pernoctaciones['Provincia'], y=total_pernoctaciones['Total'],
                    name='Pernoctaciones', marker_color='#83c9ff', marker_line_color='black', marker_line_width=1)
    if 'Viajeros' in tipo_datos_filter:
        fig.add_bar(x=total_viajeros['Provincia'], y=total_viajeros['Total'],
                    name='Viajeros', marker_color='#0068c9', marker_line_color='black', marker_line_width=1)
    # Configuraci√≥n de la figura
    fig.update_layout(
        title=f'Total Sumatorio de {", ".join(tipo_datos_filter)} por Provincia',
        xaxis_title='Provincia',
        yaxis_title='Total Sumatorio',
        paper_bgcolor='rgba(14, 17, 23, 1)',
        plot_bgcolor='rgba(234, 234, 242, 1)',
        xaxis=dict(gridcolor='white'),  # Color de la cuadr√≠cula en el eje x
        yaxis=dict(gridcolor='white'),
    )

    # Mostrar la figura en Streamlit
    col1.plotly_chart(fig)



    
    


    # Diagrama de Caja para Temperaturas Medias
    # Verificar si el filtro es 'Media_tmed', 'Media_prec', 'Media_sol', 'Media_tmin', o 'Media_tmax'
    if clima_tipo_datos_filter in ['Media_tmed', 'Media_prec', 'Media_sol', 'Media_tmin', 'Media_tmax']:
    # Crear un diagrama de caja con los resultados
        fig = px.box(clima_filtered, x='Provincia', y=clima_tipo_datos_filter, color_discrete_sequence=['#ffabab'], points="all", title=f'Distribuci√≥n de {clima_tipo_datos_filter} por Provincia')

        # Configuraci√≥n de la figura
        fig.update_layout(
            xaxis_title='Provincia',
            yaxis_title=clima_tipo_datos_filter,
            paper_bgcolor='rgba(14, 17, 23, 1)',
            plot_bgcolor='rgba(234, 234, 242, 1)',
            xaxis=dict(gridcolor='white'),  # Color de la cuadr√≠cula en el eje x
            yaxis=dict(gridcolor='white'),
        )
        
        fig.update_traces(
        boxmean="sd",  # Tipo de l√≠nea para la media y la l√≠nea del borde de la caja
        line_color='black',  # Color de la l√≠nea del borde de la caja, la l√≠nea de la media y los bigotes
    )
    
        # Mostrar la figura en Streamlit
        col2.plotly_chart(fig)
    else:
        # Si el filtro no es v√°lido, mostrar un mensaje o realizar otra acci√≥n
        col2.write("Selecciona un tipo de datos de clima v√°lido para visualizar el diagrama de caja.")
        
        
        
        
        
        
        
        
        
        
        
    # Gr√°fico de L√≠neas para Pernoctaciones a lo largo de los meses
    
    # Crear un gr√°fico de l√≠neas con los resultados
    fig = px.line(pernoctaciones_filtered, x='Periodo', y='Total', color='Provincia', title='Pernoctaciones a lo largo de los meses por Provincia')

    # Configuraci√≥n de la figura
    fig.update_layout(
        xaxis_title='Mes',
        yaxis_title='Cantidad',
        paper_bgcolor='rgba(14, 17, 23, 1)',
        plot_bgcolor='rgba(234, 234, 242, 1)',
        xaxis=dict(gridcolor='white'),  # Color de la cuadr√≠cula en el eje x
        yaxis=dict(gridcolor='white'),
    )

    # Cambiar el fondo del gr√°fico
    fig.update_layout(
        paper_bgcolor='rgba(14, 17, 23, 1)',
        plot_bgcolor='rgba(234, 234, 242, 1)',
        xaxis=dict(gridcolor='white'),  # Color de la cuadr√≠cula en el eje x
        yaxis=dict(gridcolor='white'),
    )

    # Mostrar la figura en Streamlit
    col1.plotly_chart(fig)
        
        
        
        
        
        
        
    treemap_data = pd.DataFrame()
    if not pernoctaciones_filtered.empty:
        treemap_data = pernoctaciones_filtered.groupby('Provincia')['Total'].sum().reset_index()
        title = f'Treemap: Ranking de Provincias por Pernoctaciones ({fecha_inicio} - {fecha_fin})'
    elif not viajeros_filtered.empty:
        treemap_data = viajeros_filtered.groupby('Provincia')['Total'].sum().reset_index()
        title = f'Treemap: Ranking de Provincias por Viajeros ({fecha_inicio} - {fecha_fin})'
    else:
        st.warning("No hay datos disponibles para los filtros seleccionados")

    # Crear el treemap
    if not treemap_data.empty:
        fig = px.treemap(treemap_data, path=['Provincia'], values='Total', title=title)
        col2.plotly_chart(fig)    
        
        





    viajeros_filtered_subset = viajeros_filtered[
    viajeros_filtered['Residencia'].isin(viajeros_pernoctaciones_filter)
    ]

    # Verificar si el filtro est√° seleccionado y si la opci√≥n es 'Viajeros'
    if 'Viajeros' in tipo_datos_filter and viajeros_pernoctaciones_filter:
        # Obtener el total de residentes seg√∫n el filtro seleccionado
        total_residentes = viajeros_filtered_subset.groupby('Residencia')['Total'].sum()

        # Crear un gr√°fico de pastel con los resultados
        fig = px.pie(names=total_residentes.index, values=total_residentes.values, title='Distribuci√≥n de Tipo de Residencia de Viajeros', color_discrete_sequence=['#32D7ED', '#7C32ED'])

        # Configuraci√≥n de la figura
        fig.update_layout(
            paper_bgcolor='rgba(14, 17, 23, 1)',
            plot_bgcolor='rgba(14, 17, 23, 1)',
        )

        # Mostrar la figura en Streamlit
        st.plotly_chart(fig)
    # Verificar si el filtro est√° seleccionado y si la opci√≥n es 'Pernoctaciones'
    elif 'Pernoctaciones' in tipo_datos_filter and viajeros_pernoctaciones_filter:
        # Obtener el total de pernoctaciones seg√∫n el filtro seleccionado
        total_pernoctaciones = pernoctaciones_filtered.groupby('Residencia')['Total'].sum()

        # Crear un gr√°fico de pastel con los resultados
        fig = px.pie(names=total_pernoctaciones.index, values=total_pernoctaciones.values, title='Distribuci√≥n de Tipo de Residencia de Pernoctaciones', color_discrete_sequence=['#32D7ED', '#7C32ED'])

        # Configuraci√≥n de la figura
        fig.update_layout(
            paper_bgcolor='rgba(14, 17, 23, 1)',
            plot_bgcolor='rgba(14, 17, 23, 1)',
        )

        # Mostrar la figura en Streamlit
        st.plotly_chart(fig)
    else:
        # Si no se selecciona un filtro v√°lido, mostrar un mensaje o realizar otra acci√≥n
        st.write("Selecciona al menos un tipo de residencia y aseg√∫rate de que el filtro de 'Viajeros/Pernoctaciones' est√° seleccionado para visualizar el gr√°fico de pastel.")





  
    














